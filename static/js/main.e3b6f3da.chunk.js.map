{"version":3,"sources":["utils/fetchClient.ts","components/Api/users.ts","components/UsersProvider/UsersProvider.tsx","components/UserSelector/DropDownList/DropDownList.tsx","components/UserSelector/DropDownTrigger/DropDownTrigger.tsx","components/UserSelector/UserSelector.tsx","components/Loader/Loader.tsx","components/PostsProvider/PostsProvider.tsx","components/Api/posts.ts","components/MainContent/PostsList/PostItem/PostItem.tsx","components/MainContent/PostsList/PostsList.tsx","components/MainContent/NoPostMessage/NoPostMessage.tsx","components/MainContent/PostsError/PostsError.tsx","components/MainContent/MainContent.tsx","components/CommentsProvider/CommentsProvider.tsx","components/NewCommentForm.tsx","components/MainContent/PostsList/PostItem/PostDetails/PostComments/PostComments.tsx","components/MainContent/PostsList/PostItem/PostDetails/PostHeader/PostHeader.tsx","components/MainContent/PostsList/PostItem/PostDetails/PostDetails.tsx","components/Sidebar/Sidebar.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getUsers","a","users","UsersContext","createContext","selectedUserName","selectedUserId","UsersUpdateContext","handleUserNameSelection","UsersProvider","children","useState","setUsers","setSelectedUserName","setSelectedUserId","loadData","useCallback","usersFromServer","Error","name","id","useEffect","contextValue","contextUpdateValue","Provider","value","DropDownList","names","chooseUser","className","role","map","user","index","isActive","href","classNames","onClick","DropDownTrigger","handleDropDown","type","UserSelector","useContext","isShown","setIsShown","useMemo","current","Loader","PostsContext","userPosts","isError","isLoading","selectedPost","handlePostSelection","PostsProvider","setUserPosts","setSelectedPost","setIsLoading","setIsError","loadPosts","postsFromServer","post","PostItem","title","isSelected","PostsList","NoPostMessage","PostsError","props","MainContent","isUserSelected","isNoPosts","length","isPosts","CommentsContext","comments","CommentsProvider","setComments","loadComments","PostId","commentsFromServer","NewCommentForm","htmlFor","placeholder","PostComments","comment","email","PostHeader","PostDetails","hasButton","setHasButton","isNoComments","isComments","isButton","isForm","Sidebar","shoudBeShown","App","ReactDOM","render","document","getElementById"],"mappings":"+QAAMA,EAAW,oCAGjB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GACjBC,WAAWD,EAASF,MAOxB,SAASI,EACPC,GAGa,IAFbC,EAEY,uDAFY,MACxBC,EACY,uDADA,KAENC,EAAuB,CAAEF,UAW/B,OATIC,IAEFC,EAAQC,KAAOC,KAAKC,UAAUJ,GAC9BC,EAAQI,QAAU,CAChB,eAAgB,oCAKbb,EAAK,KACTc,MAAK,kBAAMC,MAAMhB,EAAWO,EAAKG,MACjCK,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAGxB,IAAMC,EACN,SAAIZ,GAAJ,OAAoBD,EAAWC,IC/BzBa,EAAQ,uCAAG,4BAAAC,EAAA,sEACFF,EAAmB,UADjB,cAChBG,EADgB,yBAGfA,GAAS,MAHM,2CAAH,qD,OCqBRC,EAAeC,wBAAuB,CACjDF,MAAO,KACPG,iBAAkB,gBAClBC,eAAgB,IAGLC,EAAqBH,wBAA6B,CAC7DI,wBAAyB,eAGdC,EAA2B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzC,EAA0BC,mBAAwB,MAAlD,mBAAOT,EAAP,KAAcU,EAAd,KACA,EAAgDD,mBAAS,iBAAzD,mBAAON,EAAP,KAAyBQ,EAAzB,KACA,EAA4CF,mBAAS,GAArD,mBAAOL,EAAP,KAAuBQ,EAAvB,KAEMC,EAAWC,sBAAW,sBAAC,4BAAAf,EAAA,+EAEKD,IAFL,OAEnBiB,EAFmB,OAIzBL,EAASK,GAJgB,sDAMnB,IAAIC,MAAM,iCANS,yDAQ1B,IAEGV,EAA0BQ,uBAC9B,SAACG,EAAcC,GACbP,GAAoB,kBAAMM,KAC1BL,GAAkB,kBAAMM,OACvB,IAGLC,qBAAU,WACRN,MACC,IAEH,IAAMO,EAAe,CACnBpB,QACAG,mBACAC,kBAGIiB,EAAqB,CACzBf,2BAGF,OACE,cAACL,EAAaqB,SAAd,CAAuBC,MAAOH,EAA9B,SACE,cAACf,EAAmBiB,SAApB,CAA6BC,MAAOF,EAApC,SACGb,O,gBC/DIgB,EAA0B,SAAC,GAEjC,IADLC,EACI,EADJA,MAAOtB,EACH,EADGA,iBAAkBuB,EACrB,EADqBA,WAEzB,OACE,qBAAKC,UAAU,gBAAgBT,GAAG,gBAAgBU,KAAK,OAAvD,SACE,qBAAKD,UAAU,mBAAf,SACGF,GAASA,EAAMI,KAAI,SAACC,EAAMC,GACzB,IAAMC,EAAWF,EAAKb,OAASd,EAE/B,OACE,mBACE8B,KAAI,gBAAWF,EAAQ,GACvBJ,UAAWO,IACT,gBACA,CAAE,YAAaF,IAGjBG,QAAS,kBAAMT,EAAWI,EAAKb,KAAMa,EAAKZ,KAP5C,SASGY,EAAKb,MAHDa,EAAKZ,YCnBXkB,EAA6B,SAAC,GAEpC,IADLjC,EACI,EADJA,iBAAkBkC,EACd,EADcA,eAElB,OACE,qBAAKV,UAAU,mBAAf,SACE,yBACEW,KAAK,SACLX,UAAU,SACV,gBAAc,OACd,gBAAc,gBACdQ,QAASE,EALX,UAOE,+BAAOlC,IAEP,sBAAMwB,UAAU,gBAAhB,SACE,mBAAGA,UAAU,oBAAoB,cAAY,iBCf1CY,EAAmB,WAC9B,MAAoCC,qBAAWvC,GAAvCD,EAAR,EAAQA,MAAOG,EAAf,EAAeA,iBACPG,EAA4BkC,qBAAWnC,GAAvCC,wBACR,EAA8BG,oBAAS,GAAvC,mBAAOgC,EAAP,KAAgBC,EAAhB,KAEMjB,EAAQkB,mBACZ,yBAAM3C,QAAN,IAAMA,OAAN,EAAMA,EAAO6B,KAAI,YACf,MAAO,CACLZ,KAF+B,EAAfA,KAGhBC,GAH+B,EAATA,SAKtB,CAAClB,IAGDqC,EAAiBvB,uBAAY,kBACjC4B,GAAW,SAAAE,GAAO,OAAKA,OACtB,IAEGlB,EAAaZ,sBAAW,uCAAC,WAAOG,EAAcC,GAArB,SAAAnB,EAAA,sDAC7BO,EAAwBW,EAAMC,GAC9BwB,GAAW,SAAAE,GAAO,OAAKA,KAFM,2CAAD,wDAG3B,IAEH,OACE,sBACE,UAAQ,eACRjB,UAAU,qBAFZ,UAIE,cAAC,EAAD,CACEU,eAAgBA,EAChBlC,iBAAkBA,IAGnBsC,GAAWhB,GAER,cAAC,EAAD,CACEA,MAAOA,EACPtB,iBAAkBA,EAClBuB,WAAYA,QC3CXmB,G,MAAS,kBACpB,qBAAKlB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCeNmB,EAAe5C,wBAAuB,CACjD6C,UAAW,KACXC,SAAS,EACTC,WAAW,EACXC,aAAc,KACdC,oBAAqB,eAGVC,EAA2B,SAAC,GAAkB,IAAhB5C,EAAe,EAAfA,SACzC,EAAkCC,mBAAwB,MAA1D,mBAAOsC,EAAP,KAAkBM,EAAlB,KACA,EAAwC5C,mBAAsB,MAA9D,mBAAOyC,EAAP,KAAqBI,EAArB,KACA,EAAkC7C,oBAAS,GAA3C,mBAAOwC,EAAP,KAAkBM,EAAlB,KACA,EAA8B9C,oBAAS,GAAvC,mBAAOuC,EAAP,KAAgBQ,EAAhB,KACQpD,EAAmBoC,qBAAWvC,GAA9BG,eAEFqD,EAAY3C,sBAAW,sBAAC,4BAAAf,EAAA,6DAC5ByD,GAAW,GACXD,GAAa,GAFe,kBC7BvB1D,EAAA,wBDkCoCO,IALb,OAKpBsD,EALoB,OAO1BL,EAAaK,GACbH,GAAa,GARa,wDAU1BC,GAAW,GACXD,GAAa,GACP,IAAIvC,MAAM,0BAZU,0DAc3B,CAACZ,IAEE+C,EAAsBrC,uBAAY,SAAC6C,GAAD,OACtCL,GAAgB,SAAAV,GACd,OAAIA,GAAWA,EAAQ1B,MAAR,OAAeyC,QAAf,IAAeA,OAAf,EAAeA,EAAMzC,IAC3B,KAGFyC,OAER,IAEHxC,qBAAU,WACe,IAAnBf,IACFkD,EAAgB,MAChBG,OAED,CAACrD,IAEJ,IAAMgB,EAAe,CACnB2B,YACAC,UACAC,YACAC,eACAC,uBAGF,OACE,cAACL,EAAaxB,SAAd,CAAuBC,MAAOH,EAA9B,SACGZ,KElEMoD,EAAsB,SAAC,GAAc,IAAZD,EAAW,EAAXA,KACpC,EAA8CnB,qBAAWM,GAAjDI,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,oBACdjC,EAAcyC,EAAdzC,GAAI2C,EAAUF,EAAVE,MAENC,EAAanB,mBAAQ,kBAAMzB,KAAE,OAAKgC,QAAL,IAAKA,OAAL,EAAKA,EAAchC,MAAI,CAACgC,IAU3D,OACE,qBAAI,UAAQ,OAAZ,UACE,oBAAI,UAAQ,SAAZ,SAAsBhC,IAEtB,oBAAI,UAAQ,YAAZ,SACG2C,IAGH,oBAAIlC,UAAU,8BAAd,SACE,wBACEW,KAAK,SACL,UAAQ,aACRX,UAAWO,IACT,iBACA,CAAE,YAAa4B,IAEjB3B,QAxBe,YACL,OAAZe,QAAY,IAAZA,OAAA,EAAAA,EAAchC,MAAOA,EACvBiC,EAAoB,MAEpBA,EAAoBQ,IAalB,SASGG,EACG,QACA,eCvCDC,EAAgB,WAC3B,IAAQhB,EAAcP,qBAAWM,GAAzBC,UAER,OACE,sBAAK,UAAQ,YAAb,UACE,mBAAGpB,UAAU,QAAb,oBAEA,wBAAOA,UAAU,uDAAjB,UACE,gCACE,qBAAIA,UAAU,4BAAd,UACE,mCACA,uCACA,wCAIJ,gCACGoB,GAAaA,EAAUlB,KAAI,SAAA8B,GAAI,OAC9B,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKzC,gBCtBnB8C,EAA0B,WACrC,OACE,qBAAKrC,UAAU,0BAA0B,UAAQ,aAAjD,2B,6BCCSsC,EAA8B,SAAC,GAA4B,IAA1BzD,EAAyB,EAAzBA,SAAa0D,EAAY,iBACrE,OACE,+CACMA,GADN,aAGG1D,MCAM2D,EAAkB,WAC7B,IAAQhE,EAAqBqC,qBAAWvC,GAAhCE,iBACR,EAA0CqC,qBAAWM,GAA7CE,EAAR,EAAQA,QAASD,EAAjB,EAAiBA,UAAWE,EAA5B,EAA4BA,UACtBmB,EAAiBzB,mBACrB,iBAA2B,kBAArBxC,IAAsC,CAACA,IAEzCkE,EAAY1B,mBAChB,kBAA4B,KAAb,OAATI,QAAS,IAATA,OAAA,EAAAA,EAAWuB,UAAiBF,IAAmBnB,IACrD,CAACF,EAAWE,IAERsB,EAAU5B,mBACd,kBAA4B,KAAb,OAATI,QAAS,IAATA,OAAA,EAAAA,EAAWuB,UAAiBF,IAAmBnB,IACrD,CAACF,EAAWE,IAGd,OACE,sBAAKtB,UAAU,QAAQ,UAAQ,cAA/B,UACGyC,GACC,mBAAG,UAAQ,iBAAX,8BAKDnB,GAAa,cAAC,EAAD,IAEbD,GACC,cAAC,EAAD,CACErB,UAAU,yBACV,UAAQ,oBAFV,mCAQD0C,GAAa,cAAC,EAAD,IAEbE,GAAW,cAAC,EAAD,QC7BLC,EAAkBtE,wBAAuB,CACpDuE,SAAU,KACVzB,SAAS,EACTC,WAAW,IAGAyB,EAA8B,SAAC,GAAkB,IAAhBlE,EAAe,EAAfA,SAC5C,EAAgCC,mBAA2B,MAA3D,mBAAOgE,EAAP,KAAiBE,EAAjB,KACA,EAAkClE,oBAAS,GAA3C,mBAAOwC,EAAP,KAAkBM,EAAlB,KACA,EAA8B9C,oBAAS,GAAvC,mBAAOuC,EAAP,KAAgBQ,EAAhB,KACQN,EAAiBV,qBAAWM,GAA5BI,aAEF0B,EAAe9D,sBAAW,sBAAC,4BAAAf,EAAA,yDAC/ByD,GAAW,GACXD,GAAa,IAETL,EAJ2B,0CNrBP2B,EM2ByB3B,EAAahC,GN1BzDrB,EAAA,2BAA0CgF,IMoBhB,OAMrBC,EANqB,OAQ3BH,EAAYG,GACZvB,GAAa,GATc,wDAW3BC,GAAW,GACXD,GAAa,GACP,IAAIvC,MAAM,6BAbW,kCNrBR,IAAC6D,IMqBO,qBAgB9B,CAAC3B,IAEJ/B,qBAAU,WACa,OAAjB+B,GACF0B,MAED,CAAC1B,IAEJ,IAAM9B,EAAe,CACnBqD,WACAzB,UACAC,aAGF,OACE,cAACuB,EAAgBlD,SAAjB,CAA0BC,MAAOH,EAAjC,SACGZ,KC3DMuE,EAA2B,WACtC,OACE,uBAAM,UAAQ,iBAAd,UACE,sBAAKpD,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQqD,QAAQ,sBAAjC,yBAIA,sBAAKrD,UAAU,yCAAf,UACE,uBACEW,KAAK,OACLrB,KAAK,OACLC,GAAG,sBACH+D,YAAY,eACZtD,UAAU,oBAGZ,sBAAMA,UAAU,wBAAhB,SACE,mBAAGA,UAAU,kBAGf,sBACEA,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAIjB,mBAAGA,UAAU,iBAAiB,UAAQ,eAAtC,iCAKF,sBAAKA,UAAU,QAAQ,UAAQ,aAA/B,UACE,uBAAOA,UAAU,QAAQqD,QAAQ,uBAAjC,0BAIA,sBAAKrD,UAAU,yCAAf,UACE,uBACEW,KAAK,OACLrB,KAAK,QACLC,GAAG,uBACH+D,YAAY,iBACZtD,UAAU,oBAGZ,sBAAMA,UAAU,wBAAhB,SACE,mBAAGA,UAAU,sBAGf,sBACEA,UAAU,yCACV,UAAQ,YAFV,SAIE,mBAAGA,UAAU,qCAIjB,mBAAGA,UAAU,iBAAiB,UAAQ,eAAtC,kCAKF,sBAAKA,UAAU,QAAQ,UAAQ,YAA/B,UACE,uBAAOA,UAAU,QAAQqD,QAAQ,eAAjC,0BAIA,qBAAKrD,UAAU,UAAf,SACE,0BACET,GAAG,eACHD,KAAK,OACLgE,YAAY,oBACZtD,UAAU,yBAId,mBAAGA,UAAU,iBAAiB,UAAQ,eAAtC,gCAKF,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBAAQW,KAAK,SAASX,UAAU,4BAAhC,mBAKF,qBAAKA,UAAU,UAAf,SAEE,wBAAQW,KAAK,QAAQX,UAAU,0BAA/B,4BC5FGuD,EAAmB,WAC9B,IAAQT,EAAajC,qBAAWgC,GAAxBC,SAER,OACE,qCACGA,GAAY,mBAAG9C,UAAU,aAAb,uBAEZ8C,GAAYA,EAAS5C,KAAI,SAAAsD,GACxB,IACEjE,EACEiE,EADFjE,GAAIkE,EACFD,EADEC,MAAO/F,EACT8F,EADS9F,KAAM4B,EACfkE,EADelE,KAGnB,OACE,0BACEU,UAAU,mBACV,UAAQ,UAFV,UAKE,sBAAKA,UAAU,iBAAf,UACE,mBAAGM,KAAI,iBAAYmD,GAAS,UAAQ,gBAApC,SACGnE,IAEH,wBACE,UAAQ,gBACRqB,KAAK,SACLX,UAAU,kBACV,aAAW,SAJb,8BAUF,qBAAKA,UAAU,eAAe,UAAQ,cAAtC,SACGtC,MAjBE6B,UChBJmE,EAAiB,WAC5B,IAAQnC,EAAiBV,qBAAWM,GAA5BI,aAER,OACE,sBAAKvB,UAAU,QAAf,UACE,oBAAI,UAAQ,YAAZ,SACGuB,EAAY,WACLA,EAAahC,GADR,aACegC,EAAaW,OACrC,KAGN,mBAAG,UAAQ,WAAX,gBACGX,QADH,IACGA,OADH,EACGA,EAAc7D,WCLViG,EAAkB,WAC7B,MAAyC9C,qBAAWgC,GAA5CC,EAAR,EAAQA,SAAUxB,EAAlB,EAAkBA,UAAWD,EAA7B,EAA6BA,QAC7B,EAAkCvC,oBAAS,GAA3C,mBAAO8E,EAAP,KAAkBC,EAAlB,KACMC,EAAe9C,mBACnB,kBAA2B,KAAb,OAAR8B,QAAQ,IAARA,OAAA,EAAAA,EAAUH,UAAiBrB,IAAW,CAACwB,EAAUxB,IAEnDyC,EAAa/C,mBACjB,kBAA2B,KAAb,OAAR8B,QAAQ,IAARA,OAAA,EAAAA,EAAUH,UAAiBrB,IAAW,CAACwB,EAAUxB,IAEnD0C,EAAWhD,mBACf,kBAAM4C,GAAad,IAAaxB,IAAW,CAACsC,EAAWtC,IAEnD2C,EAASjD,mBACb,kBAAO4C,IAActC,IAAW,CAACsC,EAAWtC,IAW9C,OAJA9B,qBAAU,WACRqE,GAAa,KACZ,CAACf,IAGF,qBAAK9C,UAAU,UAAU,UAAQ,cAAjC,SACE,sBAAKA,UAAU,UAAU,UAAQ,cAAjC,UACE,cAAC,EAAD,IAEA,sBAAKA,UAAU,QAAf,UACGsB,GAAa,cAAC,EAAD,IAEbD,GACC,cAAC,EAAD,CACErB,UAAU,yBACV,UAAQ,gBAFV,mCAQD8D,GACC,mBAAG9D,UAAU,aAAa,UAAQ,oBAAlC,6BAKD+D,GAAc,cAAC,EAAD,IAEdC,GACC,wBACE,UAAQ,qBACRrD,KAAK,SACLX,UAAU,iBACVQ,QAtCW,WACrBqD,GAAa,IAiCL,gCAWHI,GAAU,cAAC,EAAD,UClENC,EAAc,WACzB,MAAoCrD,qBAAWM,GAAvCI,EAAR,EAAQA,aAAcD,EAAtB,EAAsBA,UAChB6C,EAAenD,mBACnB,kBAAuB,OAAjBO,IAA0BD,IAAW,CAACC,EAAcD,IAG5D,OACE,qBACE,UAAQ,UACRtB,UAAWO,IACT,OACA,YACA,eACA,UACA,CAAE,gBAAiB4D,IAPvB,SAUE,qBAAKnE,UAAU,gCAAf,SACE,cAAC,EAAD,SCZKoE,EAAU,WACrB,OACE,sBAAMpE,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,UACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,cAAC,EAAD,SAIJ,cAAC,EAAD,UACE,cAAC,EAAD,gBCvBdqE,IAASC,OACP,cAAC,EAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e3b6f3da.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { User } from '../../types/User';\nimport { client } from '../../utils/fetchClient';\n\nexport const getUsers = async () => {\n  const users = await client.get<User[]>('/users');\n\n  return users || null;\n};\n","import {\n  FC,\n  createContext,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { User } from '../../types/User';\nimport { getUsers } from '../Api/users';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Context = {\n  users: User[] | null,\n  selectedUserName: string,\n  selectedUserId: number,\n};\n\ntype UpdateContext = {\n  handleUserNameSelection: (name: string, id: number) => void,\n};\n\nexport const UsersContext = createContext<Context>({\n  users: null,\n  selectedUserName: 'Choose a user',\n  selectedUserId: 0,\n});\n\nexport const UsersUpdateContext = createContext<UpdateContext>({\n  handleUserNameSelection: () => {},\n});\n\nexport const UsersProvider: FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [selectedUserName, setSelectedUserName] = useState('Choose a user');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const loadData = useCallback(async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      throw new Error('Unable load users from server');\n    }\n  }, []);\n\n  const handleUserNameSelection = useCallback(\n    (name: string, id: number) => {\n      setSelectedUserName(() => name);\n      setSelectedUserId(() => id);\n    }, [],\n  );\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const contextValue = {\n    users,\n    selectedUserName,\n    selectedUserId,\n  };\n\n  const contextUpdateValue = {\n    handleUserNameSelection,\n  };\n\n  return (\n    <UsersContext.Provider value={contextValue}>\n      <UsersUpdateContext.Provider value={contextUpdateValue}>\n        {children}\n      </UsersUpdateContext.Provider>\n    </UsersContext.Provider>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Names } from '../../../types/Names';\n\ntype Props = {\n  names: Names[],\n  selectedUserName: string,\n  chooseUser: (name: string, id: number) => void,\n};\n\nexport const DropDownList: FC<Props> = ({\n  names, selectedUserName, chooseUser,\n}) => {\n  return (\n    <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n      <div className=\"dropdown-content\">\n        {names && names.map((user, index) => {\n          const isActive = user.name === selectedUserName;\n\n          return (\n            <a\n              href={`#user-${index + 1}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': isActive },\n              )}\n              key={user.id}\n              onClick={() => chooseUser(user.name, user.id)}\n            >\n              {user.name}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\n\ntype Props = {\n  selectedUserName: string,\n  handleDropDown: () => void,\n};\n\nexport const DropDownTrigger: FC<Props> = ({\n  selectedUserName, handleDropDown,\n}) => {\n  return (\n    <div className=\"dropdown-trigger\">\n      <button\n        type=\"button\"\n        className=\"button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"dropdown-menu\"\n        onClick={handleDropDown}\n      >\n        <span>{selectedUserName}</span>\n\n        <span className=\"icon is-small\">\n          <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n        </span>\n      </button>\n    </div>\n  );\n};\n","import {\n  FC, useContext, useState, useCallback, useMemo,\n} from 'react';\nimport { UsersContext, UsersUpdateContext } from '../UsersProvider';\nimport { DropDownList } from './DropDownList';\nimport { DropDownTrigger } from './DropDownTrigger';\n\nexport const UserSelector: FC = () => {\n  const { users, selectedUserName } = useContext(UsersContext);\n  const { handleUserNameSelection } = useContext(UsersUpdateContext);\n  const [isShown, setIsShown] = useState(false);\n\n  const names = useMemo(\n    () => users?.map(({ name, id }) => {\n      return {\n        name,\n        id,\n      };\n    }), [users],\n  );\n\n  const handleDropDown = useCallback(() => (\n    setIsShown(current => !current)\n  ), []);\n\n  const chooseUser = useCallback(async (name: string, id: number) => {\n    handleUserNameSelection(name, id);\n    setIsShown(current => !current);\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <DropDownTrigger\n        handleDropDown={handleDropDown}\n        selectedUserName={selectedUserName}\n      />\n\n      {isShown && names\n        && (\n          <DropDownList\n            names={names}\n            selectedUserName={selectedUserName}\n            chooseUser={chooseUser}\n          />\n        ) }\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  FC, createContext, useState, useEffect, useCallback, useContext,\n} from 'react';\nimport { Post } from '../../types/Post';\nimport { getPosts } from '../Api/posts';\nimport { UsersContext } from '../UsersProvider';\n\ntype Props = {\n  children: React.ReactNode,\n};\n\ntype Context = {\n  userPosts: Post[] | null,\n  isError: boolean,\n  isLoading: boolean,\n  selectedPost: Post | null,\n  handlePostSelection: (post: Post | null) => void,\n};\n\nexport const PostsContext = createContext<Context>({\n  userPosts: null,\n  isError: false,\n  isLoading: false,\n  selectedPost: null,\n  handlePostSelection: () => {},\n});\n\nexport const PostsProvider: FC<Props> = ({ children }) => {\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { selectedUserId } = useContext(UsersContext);\n\n  const loadPosts = useCallback(async () => {\n    setIsError(false);\n    setIsLoading(true);\n\n    try {\n      const postsFromServer = await getPosts(selectedUserId);\n\n      setUserPosts(postsFromServer);\n      setIsLoading(false);\n    } catch (error) {\n      setIsError(true);\n      setIsLoading(false);\n      throw new Error('Unable load user posts');\n    }\n  }, [selectedUserId]);\n\n  const handlePostSelection = useCallback((post: Post | null) => (\n    setSelectedPost(current => {\n      if (current && current.id === post?.id) {\n        return null;\n      }\n\n      return post;\n    })\n  ), []);\n\n  useEffect(() => {\n    if (selectedUserId !== 0) {\n      setSelectedPost(null);\n      loadPosts();\n    }\n  }, [selectedUserId]);\n\n  const contextValue = {\n    userPosts,\n    isError,\n    isLoading,\n    selectedPost,\n    handlePostSelection,\n  };\n\n  return (\n    <PostsContext.Provider value={contextValue}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { client } from '../../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (PostId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${PostId}`);\n};\n// export const sendTodo = (userId: number, data: Todo) => {\n//   return client.post<Todo>(`/todos?userId=${userId}`, data);\n// };\n\n// export const patchTodo = (todo: Todo) => {\n//   return client.patch<Todo>(`/todos/${todo.id}`, todo);\n// };\n\n// export const deleteTodo = (todoId: number) => {\n//   return client.delete(`/todos/${todoId}`);\n// };\n","import {\n  FC, useContext, useMemo,\n} from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../../../types/Post';\nimport { PostsContext } from '../../../PostsProvider';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostItem: FC<Props> = ({ post }) => {\n  const { selectedPost, handlePostSelection } = useContext(PostsContext);\n  const { id, title } = post;\n\n  const isSelected = useMemo(() => id === selectedPost?.id, [selectedPost]);\n\n  const handlePostView = () => {\n    if (selectedPost?.id === id) {\n      handlePostSelection(null);\n    } else {\n      handlePostSelection(post);\n    }\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames(\n            'button is-link',\n            { 'is-light': !isSelected },\n          )}\n          onClick={handlePostView}\n        >\n          {isSelected\n            ? 'Close'\n            : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import {\n  FC, useContext,\n} from 'react';\nimport { PostsContext } from '../../PostsProvider';\nimport { PostItem } from './PostItem';\n\nexport const PostsList: FC = () => {\n  const { userPosts } = useContext(PostsContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts && userPosts.map(post => (\n            <PostItem key={post.id} post={post} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const NoPostMessage: React.FC = () => {\n  return (\n    <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n      No posts yet\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  children: React.ReactNode;\n};\nexport const PostsError: React.FC<Props> = ({ children, ...props }) => {\n  return (\n    <div\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n","import {\n  FC, useContext, useMemo,\n} from 'react';\nimport { Loader } from '../Loader';\nimport { PostsList } from './PostsList/PostsList';\nimport { PostsContext } from '../PostsProvider';\nimport { UsersContext } from '../UsersProvider';\nimport { NoPostMessage } from './NoPostMessage';\nimport { PostsError } from './PostsError';\n\nexport const MainContent: FC = () => {\n  const { selectedUserName } = useContext(UsersContext);\n  const { isError, userPosts, isLoading } = useContext(PostsContext);\n  const isUserSelected = useMemo(\n    () => selectedUserName === 'Choose a user', [selectedUserName],\n  );\n  const isNoPosts = useMemo(\n    () => userPosts?.length === 0 && !isUserSelected && !isLoading,\n    [userPosts, isLoading],\n  );\n  const isPosts = useMemo(\n    () => userPosts?.length !== 0 && !isUserSelected && !isLoading,\n    [userPosts, isLoading],\n  );\n\n  return (\n    <div className=\"block\" data-cy=\"MainContent\">\n      {isUserSelected && (\n        <p data-cy=\"NoSelectedUser\">\n          No user selected\n        </p>\n      )}\n\n      {isLoading && <Loader />}\n\n      {isError && (\n        <PostsError\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          Something went wrong!\n        </PostsError>\n      )}\n\n      {isNoPosts && <NoPostMessage />}\n\n      {isPosts && <PostsList />}\n    </div>\n  );\n};\n","import {\n  FC, createContext, useState, useContext, useCallback, useEffect,\n} from 'react';\nimport { Comment } from '../../types/Comment';\nimport { getComments } from '../Api/posts';\nimport { PostsContext } from '../PostsProvider';\n\ntype Props = {\n  children: React.ReactNode,\n};\n\ntype Context = {\n  comments: Comment[] | null,\n  isError: boolean,\n  isLoading: boolean,\n};\n\nexport const CommentsContext = createContext<Context>({\n  comments: null,\n  isError: false,\n  isLoading: false,\n});\n\nexport const CommentsProvider: FC<Props> = ({ children }) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { selectedPost } = useContext(PostsContext);\n\n  const loadComments = useCallback(async () => {\n    setIsError(false);\n    setIsLoading(true);\n\n    if (selectedPost) {\n      try {\n        const commentsFromServer = await getComments(selectedPost.id);\n\n        setComments(commentsFromServer);\n        setIsLoading(false);\n      } catch (error) {\n        setIsError(true);\n        setIsLoading(false);\n        throw new Error('Unable load post comments');\n      }\n    }\n  }, [selectedPost]);\n\n  useEffect(() => {\n    if (selectedPost !== null) {\n      loadComments();\n    }\n  }, [selectedPost]);\n\n  const contextValue = {\n    comments,\n    isError,\n    isLoading,\n  };\n\n  return (\n    <CommentsContext.Provider value={contextValue}>\n      {children}\n    </CommentsContext.Provider>\n  );\n};\n","import React from 'react';\n\nexport const NewCommentForm: React.FC = () => {\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className=\"input is-danger\"\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Name is required\n        </p>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className=\"input is-danger\"\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Email is required\n        </p>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"textarea is-danger\"\n          />\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Enter some text\n        </p>\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-link is-loading\">\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { FC, useContext } from 'react';\nimport { CommentsContext } from '../../../../../CommentsProvider';\n\nexport const PostComments: FC = () => {\n  const { comments } = useContext(CommentsContext);\n\n  return (\n    <>\n      {comments && <p className=\"title is-4\">Comments:</p>}\n\n      {comments && comments.map(comment => {\n        const {\n          id, email, body, name,\n        } = comment;\n\n        return (\n          <article\n            className=\"message is-small\"\n            data-cy=\"Comment\"\n            key={id}\n          >\n            <div className=\"message-header\">\n              <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                {name}\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {body}\n            </div>\n          </article>\n        );\n      })}\n    </>\n  );\n};\n","import { FC, useContext } from 'react';\nimport { PostsContext } from '../../../../../PostsProvider';\n\nexport const PostHeader: FC = () => {\n  const { selectedPost } = useContext(PostsContext);\n\n  return (\n    <div className=\"block\">\n      <h2 data-cy=\"PostTitle\">\n        {selectedPost\n          ? `#${selectedPost.id}: ${selectedPost.title}`\n          : ''}\n      </h2>\n\n      <p data-cy=\"PostBody\">\n        {selectedPost?.body}\n      </p>\n    </div>\n  );\n};\n","import {\n  FC, useContext, useMemo, useState, useEffect,\n} from 'react';\nimport { CommentsContext } from '../../../../CommentsProvider';\nimport { Loader } from '../../../../Loader';\nimport { NewCommentForm } from '../../../../NewCommentForm';\nimport { PostsError } from '../../../PostsError';\nimport { PostComments } from './PostComments';\nimport { PostHeader } from './PostHeader';\n\nexport const PostDetails: FC = () => {\n  const { comments, isLoading, isError } = useContext(CommentsContext);\n  const [hasButton, setHasButton] = useState(true);\n  const isNoComments = useMemo(\n    () => comments?.length === 0 && !isLoading, [comments, isLoading],\n  );\n  const isComments = useMemo(\n    () => comments?.length !== 0 && !isLoading, [comments, isLoading],\n  );\n  const isButton = useMemo(\n    () => hasButton && comments && !isLoading, [hasButton, isLoading],\n  );\n  const isForm = useMemo(\n    () => !hasButton && !isLoading, [hasButton, isLoading],\n  );\n\n  const handleFormShow = () => {\n    setHasButton(false);\n  };\n\n  useEffect(() => {\n    setHasButton(true);\n  }, [comments]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <PostHeader />\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isError && (\n            <PostsError\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong!\n            </PostsError>\n          )}\n\n          {isNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isComments && <PostComments />}\n\n          {isButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleFormShow}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isForm && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import { FC, useContext, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { PostDetails } from '../MainContent/PostsList/PostItem/PostDetails';\nimport { PostsContext } from '../PostsProvider';\n\nexport const Sidebar: FC = () => {\n  const { selectedPost, isLoading } = useContext(PostsContext);\n  const shoudBeShown = useMemo(\n    () => selectedPost !== null && !isLoading, [selectedPost, isLoading],\n  );\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        { 'Sidebar--open': shoudBeShown },\n      )}\n    >\n      <div className=\"tile is-child box is-success \">\n        <PostDetails />\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { MainContent } from './components/MainContent';\nimport { Sidebar } from './components/Sidebar';\nimport { CommentsProvider } from './components/CommentsProvider';\nimport { PostsProvider } from './components/PostsProvider';\n\nexport const App: FC = () => {\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <PostsProvider>\n          <div className=\"tile is-ancestor\">\n            <div className=\"tile is-parent\">\n              <div className=\"tile is-child box is-success\">\n                <div className=\"block\">\n                  <UserSelector />\n                </div>\n\n                <MainContent />\n              </div>\n            </div>\n\n            <CommentsProvider>\n              <Sidebar />\n            </CommentsProvider>\n          </div>\n        </PostsProvider>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UsersProvider } from './components/UsersProvider';\n\nReactDOM.render(\n  <UsersProvider>\n    <App />\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
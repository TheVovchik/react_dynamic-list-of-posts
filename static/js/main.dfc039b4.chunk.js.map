{"version":3,"sources":["components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","utils/fetchClient.ts","components/Api/users.ts","components/UsersProvider/UsersProvider.tsx","components/UserSelector/DropDownList/DropDownList.tsx","components/UserSelector/DropDownTrigger/DropDownTrigger.tsx","components/UserSelector/UserSelector.tsx","components/MainContent/PostsProvider/PostsProvider.tsx","components/Api/posts.ts","components/MainContent/PostsList/PostItem/PostItem.tsx","components/MainContent/PostsList/PostsList.tsx","components/MainContent/NoPostMessage/NoPostMessage.tsx","components/MainContent/PostsError/PostsError.tsx","components/MainContent/MainContent.tsx","App.tsx","index.tsx"],"names":["Loader","className","NewCommentForm","htmlFor","type","name","id","placeholder","PostDetails","href","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getUsers","a","users","UsersContext","createContext","selectedUserName","selectedUserId","UsersUpdateContext","handleUserNameSelection","UsersProvider","children","useState","setUsers","setSelectedUserName","setSelectedUserId","loadData","useCallback","usersFromServer","Error","useEffect","contextValue","contextUpdateValue","Provider","value","DropDownList","names","chooseUser","role","map","user","index","isActive","classNames","onClick","DropDownTrigger","handleDropDown","UserSelector","useContext","isShown","setIsShown","useMemo","current","PostsContext","userPosts","isError","isLoading","selectedPostId","handlePostSelection","PostsProvider","setUserPosts","setSelectedPostId","setIsLoading","setIsError","loadPosts","postsFromServer","PostItem","post","title","isSelected","PostsList","NoPostMessage","PostsError","MainContent","isUserSelected","isNoPosts","length","isPosts","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dfc039b4.chunk.js","sourcesContent":["import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\n\nexport const NewCommentForm: React.FC = () => {\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className=\"input is-danger\"\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Name is required\n        </p>\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className=\"input is-danger\"\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Email is required\n        </p>\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"textarea is-danger\"\n          />\n        </div>\n\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          Enter some text\n        </p>\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-link is-loading\">\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nexport const PostDetails: React.FC = () => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            #18: voluptate et itaque vero tempora molestiae\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            eveniet quo quis\n            laborum totam consequatur non dolor\n            ut et est repudiandae\n            est voluptatem vel debitis et magnam\n          </p>\n        </div>\n\n        <div className=\"block\">\n          <Loader />\n\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n\n          <p className=\"title is-4\">Comments:</p>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a href=\"mailto:misha@mate.academy\" data-cy=\"CommentAuthor\">\n                Misha Hrynko\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              Some comment\n            </div>\n          </article>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a\n                href=\"mailto:misha@mate.academy\"\n                data-cy=\"CommentAuthor\"\n              >\n                Misha Hrynko\n              </a>\n\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n            <div\n              className=\"message-body\"\n              data-cy=\"CommentBody\"\n            >\n              One more comment\n            </div>\n          </article>\n\n          <article className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a\n                href=\"mailto:misha@mate.academy\"\n                data-cy=\"CommentAuthor\"\n              >\n                Misha Hrynko\n              </a>\n\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {'Multi\\nline\\ncomment'}\n            </div>\n          </article>\n\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n          >\n            Write a comment\n          </button>\n        </div>\n\n        <NewCommentForm />\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { User } from '../../types/User';\nimport { client } from '../../utils/fetchClient';\n\nexport const getUsers = async () => {\n  const users = await client.get<User[]>('/users');\n\n  return users || null;\n};\n","import {\n  FC,\n  createContext,\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport { User } from '../../types/User';\nimport { getUsers } from '../Api/users';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Context = {\n  users: User[] | null,\n  selectedUserName: string,\n  selectedUserId: number,\n};\n\ntype UpdateContext = {\n  handleUserNameSelection: (name: string, id: number) => void,\n};\n\nexport const UsersContext = createContext<Context>({\n  users: null,\n  selectedUserName: 'Choose a user',\n  selectedUserId: 0,\n});\n\nexport const UsersUpdateContext = createContext<UpdateContext>({\n  handleUserNameSelection: () => {},\n});\n\nexport const UsersProvider: FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [selectedUserName, setSelectedUserName] = useState('Choose a user');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const loadData = useCallback(async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      throw new Error('Unable load users from server');\n    }\n  }, []);\n\n  const handleUserNameSelection = useCallback(\n    (name: string, id: number) => {\n      setSelectedUserName(() => name);\n      setSelectedUserId(() => id);\n    }, [],\n  );\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const contextValue = {\n    users,\n    selectedUserName,\n    selectedUserId,\n  };\n\n  const contextUpdateValue = {\n    handleUserNameSelection,\n  };\n\n  return (\n    <UsersContext.Provider value={contextValue}>\n      <UsersUpdateContext.Provider value={contextUpdateValue}>\n        {children}\n      </UsersUpdateContext.Provider>\n    </UsersContext.Provider>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Names } from '../../../types/Names';\n\ntype Props = {\n  names: Names[],\n  selectedUserName: string,\n  chooseUser: (name: string, id: number) => void,\n};\n\nexport const DropDownList: FC<Props> = ({\n  names, selectedUserName, chooseUser,\n}) => {\n  return (\n    <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n      <div className=\"dropdown-content\">\n        {names && names.map((user, index) => {\n          const isActive = user.name === selectedUserName;\n\n          return (\n            <a\n              href={`#user-${index + 1}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': isActive },\n              )}\n              key={user.id}\n              onClick={() => chooseUser(user.name, user.id)}\n            >\n              {user.name}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\n\ntype Props = {\n  selectedUserName: string,\n  handleDropDown: () => void,\n};\n\nexport const DropDownTrigger: FC<Props> = ({\n  selectedUserName, handleDropDown,\n}) => {\n  return (\n    <div className=\"dropdown-trigger\">\n      <button\n        type=\"button\"\n        className=\"button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"dropdown-menu\"\n        onClick={handleDropDown}\n      >\n        <span>{selectedUserName}</span>\n\n        <span className=\"icon is-small\">\n          <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n        </span>\n      </button>\n    </div>\n  );\n};\n","import {\n  FC, useContext, useState, useCallback, useMemo,\n} from 'react';\nimport { UsersContext, UsersUpdateContext } from '../UsersProvider';\nimport { DropDownList } from './DropDownList';\nimport { DropDownTrigger } from './DropDownTrigger';\n\nexport const UserSelector: FC = () => {\n  const { users, selectedUserName } = useContext(UsersContext);\n  const { handleUserNameSelection } = useContext(UsersUpdateContext);\n  const [isShown, setIsShown] = useState(false);\n\n  const names = useMemo(\n    () => users?.map(({ name, id }) => {\n      return {\n        name,\n        id,\n      };\n    }), [users],\n  );\n\n  const handleDropDown = useCallback(() => (\n    setIsShown(current => !current)\n  ), []);\n\n  const chooseUser = useCallback(async (name: string, id: number) => {\n    handleUserNameSelection(name, id);\n    setIsShown(current => !current);\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <DropDownTrigger\n        handleDropDown={handleDropDown}\n        selectedUserName={selectedUserName}\n      />\n\n      {isShown && names\n        && (\n          <DropDownList\n            names={names}\n            selectedUserName={selectedUserName}\n            chooseUser={chooseUser}\n          />\n        ) }\n    </div>\n  );\n};\n","import {\n  FC, createContext, useState, useEffect, useCallback, useContext,\n} from 'react';\nimport { Post } from '../../../types/Post';\nimport { getPosts } from '../../Api/posts';\nimport { UsersContext } from '../../UsersProvider';\n\ntype Props = {\n  children: React.ReactNode,\n};\n\ntype Context = {\n  userPosts: Post[] | null,\n  isError: boolean,\n  isLoading: boolean,\n  selectedPostId: number,\n  handlePostSelection: (id: number) => void,\n};\n\nexport const PostsContext = createContext<Context>({\n  userPosts: null,\n  isError: false,\n  isLoading: false,\n  selectedPostId: 0,\n  handlePostSelection: () => {},\n});\n\nexport const PostsProvider: FC<Props> = ({ children }) => {\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { selectedUserId } = useContext(UsersContext);\n\n  const loadPosts = useCallback(async () => {\n    setIsError(false);\n    setIsLoading(true);\n\n    try {\n      const postsFromServer = await getPosts(selectedUserId);\n\n      setUserPosts(postsFromServer);\n      setIsLoading(false);\n    } catch (error) {\n      setIsError(true);\n      setIsLoading(false);\n      throw new Error('Unable load user posts');\n    }\n  }, [selectedUserId]);\n\n  const handlePostSelection = useCallback((id: number) => (\n    setSelectedPostId(id)\n  ), []);\n\n  useEffect(() => {\n    if (selectedUserId !== 0) {\n      loadPosts();\n    }\n  }, [selectedUserId]);\n\n  const contextValue = {\n    userPosts,\n    isError,\n    isLoading,\n    selectedPostId,\n    handlePostSelection,\n  };\n\n  return (\n    <PostsContext.Provider value={contextValue}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { Comment } from '../../types/Comment';\nimport { Post } from '../../types/Post';\nimport { client } from '../../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (PostId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${PostId}`);\n};\n// export const sendTodo = (userId: number, data: Todo) => {\n//   return client.post<Todo>(`/todos?userId=${userId}`, data);\n// };\n\n// export const patchTodo = (todo: Todo) => {\n//   return client.patch<Todo>(`/todos/${todo.id}`, todo);\n// };\n\n// export const deleteTodo = (todoId: number) => {\n//   return client.delete(`/todos/${todoId}`);\n// };\n","import {\n  FC, useContext, useMemo,\n} from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../../../types/Post';\nimport { PostsContext } from '../../PostsProvider';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostItem: FC<Props> = ({ post }) => {\n  const { selectedPostId, handlePostSelection } = useContext(PostsContext);\n  const { id, title } = post;\n\n  const isSelected = useMemo(() => id === selectedPostId, [selectedPostId]);\n\n  const handlePostView = () => {\n    if (selectedPostId === id) {\n      handlePostSelection(0);\n    } else {\n      handlePostSelection(id);\n    }\n  };\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames(\n            'button is-link',\n            { 'is-light': !isSelected },\n          )}\n          onClick={handlePostView}\n        >\n          {isSelected\n            ? 'Close'\n            : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import {\n  FC, useContext,\n} from 'react';\nimport { PostsContext } from '../PostsProvider';\nimport { PostItem } from './PostItem';\n\nexport const PostsList: FC = () => {\n  const { userPosts } = useContext(PostsContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts && userPosts.map(post => (\n            <PostItem key={post.id} post={post} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const NoPostMessage: React.FC = () => {\n  return (\n    <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n      No posts yet\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const PostsError: React.FC = () => {\n  return (\n    <div\n      className=\"notification is-danger\"\n      data-cy=\"PostsLoadingError\"\n    >\n      Something went wrong!\n    </div>\n  );\n};\n","import {\n  FC, useContext, useMemo,\n} from 'react';\nimport { Loader } from '../Loader';\nimport { PostsList } from './PostsList/PostsList';\nimport { PostsContext } from './PostsProvider';\nimport { UsersContext } from '../UsersProvider';\nimport { NoPostMessage } from './NoPostMessage';\nimport { PostsError } from './PostsError';\n\nexport const MainContent: FC = () => {\n  const { selectedUserName } = useContext(UsersContext);\n  const { isError, userPosts, isLoading } = useContext(PostsContext);\n  const isUserSelected = useMemo(\n    () => selectedUserName === 'Choose a user', [selectedUserName],\n  );\n  const isNoPosts = useMemo(\n    () => userPosts?.length === 0 && !isUserSelected && !isLoading,\n    [userPosts, isLoading],\n  );\n  const isPosts = useMemo(\n    () => userPosts?.length !== 0 && !isUserSelected && !isLoading,\n    [userPosts, isLoading],\n  );\n\n  return (\n    <div className=\"block\" data-cy=\"MainContent\">\n      {isUserSelected && (\n        <p data-cy=\"NoSelectedUser\">\n          No user selected\n        </p>\n      )}\n\n      {isLoading && <Loader />}\n\n      {isError && <PostsError />}\n\n      {isNoPosts && <NoPostMessage />}\n\n      {isPosts && <PostsList />}\n    </div>\n  );\n};\n","import React from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { MainContent } from './components/MainContent';\nimport { PostsProvider } from './components/MainContent/PostsProvider';\n\nexport const App: React.FC = () => {\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <PostsProvider>\n\n                <div className=\"block\">\n                  <UserSelector />\n                </div>\n\n                <MainContent />\n              </PostsProvider>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              'Sidebar--open',\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UsersProvider } from './components/UsersProvider';\n\nReactDOM.render(\n  <UsersProvider>\n    <App />\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
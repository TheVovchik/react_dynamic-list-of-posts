{"version":3,"sources":["utils/fetchClient.ts","components/Api/users.ts","components/UsersProvider/UsersProvider.tsx","components/UserSelector/DropDownList/DropDownList.tsx","components/UserSelector/DropDownTrigger/DropDownTrigger.tsx","components/UserSelector/UserSelector.tsx","components/Loader/Loader.tsx","components/PostsProvider/PostsProvider.tsx","components/Api/posts.ts","components/MainContent/PostsList/PostItem/PostItem.tsx","components/MainContent/PostsList/PostsList.tsx","components/MainContent/NoPostMessage/NoPostMessage.tsx","components/MainContent/PostsError/PostsError.tsx","components/MainContent/MainContent.tsx","components/Api/comments.ts","components/CommentsProvider/CommentsProvider.tsx","components/NewCommentForm/ErrorTriangle/ErrorTriangle.tsx","components/NewCommentForm/ErrorMessage/ErrorMessage.tsx","components/NewCommentForm/EmailInput/EmailInput.tsx","components/NewCommentForm/NameInput/NameInput.tsx","components/NewCommentForm/NewCommentsForm.Constant.ts","components/NewCommentForm/TextArea/TextArea.tsx","components/NewCommentForm/FormButtons/FormButtons.tsx","components/NewCommentForm/NewCommentForm.tsx","components/Sidebar/PostDetails/PostComments/PostComments.tsx","components/Sidebar/PostDetails/PostHeader/PostHeader.tsx","components/Sidebar/PostDetails/PostDetails.tsx","components/Sidebar/Sidebar.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getUsers","a","users","UsersContext","createContext","selectedUserName","selectedUserId","UsersUpdateContext","handleUserNameSelection","UsersProvider","children","useState","setUsers","setSelectedUserName","setSelectedUserId","loadData","useCallback","usersFromServer","Error","name","id","useEffect","contextValue","contextUpdateValue","Provider","value","DropDownList","names","chooseUser","className","role","map","user","index","isActive","href","classNames","onClick","DropDownTrigger","handleDropDown","type","UserSelector","memo","useContext","isShown","setIsShown","useMemo","current","Loader","PostsContext","userPosts","isError","isLoading","selectedPost","handlePostSelection","PostsProvider","setUserPosts","setSelectedPost","setIsLoading","setIsError","loadPosts","postsFromServer","post","PostItem","title","isSelected","handlePostView","PostsList","NoPostMessage","PostsError","props","MainContent","isUserSelected","isNoPosts","length","isPosts","deleteComment","commentId","CommentsContext","comments","addComment","removeComment","CommentsProvider","setComments","loadComments","postId","commentsFromServer","tempComment","comment","newComment","filter","ErrorTriangle","ErrorMessage","EmailInput","email","isEmail","isValidEmail","handleEmailInput","isValid","htmlFor","placeholder","onChange","NameInput","isValidName","handleNameInput","emailPattern","TextArea","isValidBody","handleBodyChange","FormButtons","shouldClear","handleReset","NewCommentForm","setName","setIsValidName","setEmail","setIsEmail","setIsValidEmail","setBody","setIsValidBody","event","target","handleSubmit","canSubmit","preventDefault","trim","test","onSubmit","PostComments","PostHeader","PostDetails","hasButton","setHasButton","isNoComments","isComments","isButton","isForm","handleFormShow","Sidebar","shoudBeShown","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.acf0d50a.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { User } from '../../types/User';\nimport { client } from '../../utils/fetchClient';\n\n// sending request for get all users that saves on API server\nexport const getUsers = async () => {\n  const users = await client.get<User[]>('/users');\n\n  return users || null;\n};\n","import {\n  FC, createContext, useState, useEffect, useCallback,\n} from 'react';\nimport { User } from '../../types/User';\nimport { getUsers } from '../Api/users';\n\n// #region ---- TYPES ------\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Context = {\n  users: User[] | null,\n  selectedUserName: string,\n  selectedUserId: number,\n};\n\ntype UpdateContext = {\n  handleUserNameSelection: (name: string, id: number) => void,\n};\n\n// #endregion\n\nexport const UsersContext = createContext<Context>({\n  users: null,\n  selectedUserName: 'Choose a user',\n  selectedUserId: 0,\n});\n\nexport const UsersUpdateContext = createContext<UpdateContext>({\n  handleUserNameSelection: () => {},\n});\n\nexport const UsersProvider: FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [selectedUserName, setSelectedUserName] = useState('Choose a user');\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  // loading users data from server\n  const loadData = useCallback(async () => {\n    try {\n      const usersFromServer = await getUsers();\n\n      setUsers(usersFromServer);\n    } catch (error) {\n      throw new Error('Unable load users from server');\n    }\n  }, []);\n\n  // handler for selection of user\n  const handleUserNameSelection = useCallback(\n    (name: string, id: number) => {\n      setSelectedUserName(() => name);\n      setSelectedUserId(() => id);\n    }, [],\n  );\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const contextValue = {\n    users,\n    selectedUserName,\n    selectedUserId,\n  };\n\n  const contextUpdateValue = {\n    handleUserNameSelection,\n  };\n\n  return (\n    <UsersContext.Provider value={contextValue}>\n      <UsersUpdateContext.Provider value={contextUpdateValue}>\n        {children}\n      </UsersUpdateContext.Provider>\n    </UsersContext.Provider>\n  );\n};\n","import { FC } from 'react';\nimport classNames from 'classnames';\nimport { Names } from '../../../types/Names';\n\ntype Props = {\n  names: Names[],\n  selectedUserName: string,\n  chooseUser: (name: string, id: number) => void,\n};\n\nexport const DropDownList: FC<Props> = ({\n  names, selectedUserName, chooseUser,\n}) => {\n  return (\n    <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n      <div className=\"dropdown-content\">\n        {names && names.map((user, index) => {\n          const isActive = user.name === selectedUserName;\n\n          return (\n            <a\n              href={`#user-${index + 1}`}\n              className={classNames(\n                'dropdown-item',\n                { 'is-active': isActive },\n              )}\n              key={user.id}\n              onClick={() => chooseUser(user.name, user.id)}\n            >\n              {user.name}\n            </a>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\n\ntype Props = {\n  selectedUserName: string,\n  handleDropDown: () => void,\n};\n\nexport const DropDownTrigger: FC<Props> = ({\n  selectedUserName, handleDropDown,\n}) => {\n  return (\n    <div className=\"dropdown-trigger\">\n      <button\n        type=\"button\"\n        className=\"button\"\n        aria-haspopup=\"true\"\n        aria-controls=\"dropdown-menu\"\n        onClick={handleDropDown}\n      >\n        <span>{selectedUserName}</span>\n\n        <span className=\"icon is-small\">\n          <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n        </span>\n      </button>\n    </div>\n  );\n};\n","import {\n  FC, useContext, useState, useCallback, useMemo, memo,\n} from 'react';\nimport { UsersContext, UsersUpdateContext } from '../UsersProvider';\nimport { DropDownList } from './DropDownList';\nimport { DropDownTrigger } from './DropDownTrigger';\n\nexport const UserSelector: FC = memo(() => {\n  const { users, selectedUserName } = useContext(UsersContext);\n  const { handleUserNameSelection } = useContext(UsersUpdateContext);\n  const [isShown, setIsShown] = useState(false);\n\n  const names = useMemo(\n    () => users?.map(({ name, id }) => {\n      return {\n        name,\n        id,\n      };\n    }), [users],\n  );\n\n  // handler to show drop down list of users\n  const handleDropDown = useCallback(() => (\n    setIsShown(current => !current)\n  ), []);\n\n  // handler of selected user\n  const chooseUser = useCallback(async (name: string, id: number) => {\n    handleUserNameSelection(name, id);\n    setIsShown(current => !current);\n  }, []);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <DropDownTrigger\n        handleDropDown={handleDropDown}\n        selectedUserName={selectedUserName}\n      />\n\n      {isShown && names\n        && (\n          <DropDownList\n            names={names}\n            selectedUserName={selectedUserName}\n            chooseUser={chooseUser}\n          />\n        ) }\n    </div>\n  );\n});\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  FC, createContext, useState, useEffect, useCallback, useContext,\n} from 'react';\nimport { Post } from '../../types/Post';\nimport { getPosts } from '../Api/posts';\nimport { UsersContext } from '../UsersProvider';\n\n// #region ---- TYPES ------\n\ntype Props = {\n  children: React.ReactNode,\n};\n\ntype Context = {\n  userPosts: Post[] | null,\n  isError: boolean,\n  isLoading: boolean,\n  selectedPost: Post | null,\n  handlePostSelection: (post: Post | null) => void,\n};\n\n// #endregion\n\nexport const PostsContext = createContext<Context>({\n  userPosts: null,\n  isError: false,\n  isLoading: false,\n  selectedPost: null,\n  handlePostSelection: () => {},\n});\n\nexport const PostsProvider: FC<Props> = ({ children }) => {\n  const [userPosts, setUserPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { selectedUserId } = useContext(UsersContext);\n\n  // load Posts from API server by selected user id\n  const loadPosts = useCallback(async () => {\n    setIsError(false);\n    setIsLoading(true);\n\n    try {\n      const postsFromServer = await getPosts(selectedUserId);\n\n      setUserPosts(postsFromServer);\n      setIsLoading(false);\n    } catch (error) {\n      setIsError(true);\n      setIsLoading(false);\n      throw new Error('Unable load user posts');\n    }\n  }, [selectedUserId]);\n\n  // handler for open/close button\n  const handlePostSelection = useCallback((post: Post | null) => (\n    setSelectedPost(current => {\n      if (current && current.id === post?.id) {\n        return null;\n      }\n\n      return post;\n    })\n  ), []);\n\n  useEffect(() => {\n    setUserPosts(null);\n    setSelectedPost(null);\n\n    if (selectedUserId !== 0) {\n      loadPosts();\n    }\n  }, [selectedUserId]);\n\n  const contextValue = {\n    userPosts,\n    isError,\n    isLoading,\n    selectedPost,\n    handlePostSelection,\n  };\n\n  return (\n    <PostsContext.Provider value={contextValue}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import { Post } from '../../types/Post';\nimport { client } from '../../utils/fetchClient';\n\n// sending request to get array of user posts by user id\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import {\n  FC, useContext, useMemo, memo, useCallback,\n} from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../../../../types/Post';\nimport { PostsContext } from '../../../PostsProvider';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostItem: FC<Props> = memo(({ post }) => {\n  const { selectedPost, handlePostSelection } = useContext(PostsContext);\n  const { id, title } = post;\n\n  const isSelected = useMemo(() => id === selectedPost?.id, [selectedPost]);\n\n  // handler for open / close button to (not)show post details\n  const handlePostView = useCallback(() => {\n    if (selectedPost?.id === id) {\n      handlePostSelection(null);\n    } else {\n      handlePostSelection(post);\n    }\n  }, [selectedPost]);\n\n  return (\n    <tr data-cy=\"Post\">\n      <td data-cy=\"PostId\">{id}</td>\n\n      <td data-cy=\"PostTitle\">\n        {title}\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          type=\"button\"\n          data-cy=\"PostButton\"\n          className={classNames(\n            'button is-link',\n            { 'is-light': !isSelected },\n          )}\n          onClick={handlePostView}\n        >\n          {isSelected\n            ? 'Close'\n            : 'Open'}\n        </button>\n      </td>\n    </tr>\n  );\n});\n","import {\n  FC, useContext, memo,\n} from 'react';\nimport { PostsContext } from '../../PostsProvider';\nimport { PostItem } from './PostItem';\n\nexport const PostsList: FC = memo(() => {\n  const { userPosts } = useContext(PostsContext);\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts && userPosts.map(post => (\n            <PostItem key={post.id} post={post} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n});\n","import React from 'react';\n\nexport const NoPostMessage: React.FC = () => {\n  return (\n    <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n      No posts yet\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  children: React.ReactNode;\n};\nexport const PostsError: React.FC<Props> = ({ children, ...props }) => {\n  return (\n    <div\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n","import {\n  FC, useContext, useMemo,\n} from 'react';\nimport { Loader } from '../Loader';\nimport { PostsList } from './PostsList/PostsList';\nimport { PostsContext } from '../PostsProvider';\nimport { UsersContext } from '../UsersProvider';\nimport { NoPostMessage } from './NoPostMessage';\nimport { PostsError } from './PostsError';\n\nexport const MainContent: FC = () => {\n  const { selectedUserName } = useContext(UsersContext);\n  const { isError, userPosts, isLoading } = useContext(PostsContext);\n  const isUserSelected = useMemo(\n    () => selectedUserName === 'Choose a user', [selectedUserName],\n  );\n  const isNoPosts = useMemo(\n    () => userPosts?.length === 0 && !isUserSelected && !isLoading,\n    [userPosts, isLoading],\n  );\n  const isPosts = useMemo(\n    () => userPosts?.length !== 0 && !isUserSelected && !isLoading && userPosts,\n    [userPosts, isLoading],\n  );\n\n  return (\n    <div className=\"block\" data-cy=\"MainContent\">\n      {isUserSelected && (\n        <p data-cy=\"NoSelectedUser\">\n          No user selected\n        </p>\n      )}\n\n      {isLoading && <Loader />}\n\n      {isError && (\n        <PostsError\n          className=\"notification is-danger\"\n          data-cy=\"PostsLoadingError\"\n        >\n          Something went wrong!\n        </PostsError>\n      )}\n\n      {isNoPosts && <NoPostMessage />}\n\n      {isPosts && <PostsList />}\n    </div>\n  );\n};\n","import { Comment } from '../../types/Comment';\nimport { client } from '../../utils/fetchClient';\n\n// sending request to get comments by post Id\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\n// sending request to add new comment by post Id in API serever\nexport const postComment = (postId: number, comment: Comment) => {\n  return client.post<Comment>(`/comments?postId=${postId}`, comment);\n};\n\n// sending request to delete comment by comment Id\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import {\n  FC, createContext, useState, useContext, useCallback, useEffect,\n} from 'react';\nimport { Comment } from '../../types/Comment';\nimport { deleteComment, getComments, postComment } from '../Api/comments';\nimport { PostsContext } from '../PostsProvider';\n\n// #region ---- TYPES ------\ntype Props = {\n  children: React.ReactNode,\n};\n\ntype Context = {\n  comments: Comment[] | null,\n  isError: boolean,\n  isLoading: boolean,\n  addComment: (tempComment: Comment) => void,\n  removeComment: (commentId: number) => void,\n};\n\n// #endregion\n\nexport const CommentsContext = createContext<Context>({\n  comments: null,\n  isError: false,\n  isLoading: false,\n  addComment: () => {},\n  removeComment: () => {},\n});\n\nexport const CommentsProvider: FC<Props> = ({ children }) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const { selectedPost } = useContext(PostsContext);\n\n  // loading comments from API server\n  const loadComments = useCallback(async () => {\n    setIsError(false);\n    setIsLoading(true);\n\n    if (selectedPost) {\n      try {\n        const commentsFromServer = await getComments(selectedPost.id);\n\n        setComments(commentsFromServer);\n        setIsLoading(false);\n      } catch (error) {\n        setIsError(true);\n        setIsLoading(false);\n        throw new Error('Unable load post comments');\n      }\n    }\n  }, [selectedPost]);\n\n  // adding comment on server\n  const addComment = useCallback(async (tempComment: Comment) => {\n    setIsError(false);\n\n    if (selectedPost) {\n      try {\n        const newComment = await postComment(\n          selectedPost.id, tempComment,\n        );\n\n        setComments(current => (current && newComment\n          ? [...current, newComment]\n          : [newComment]));\n      } catch (error) {\n        setIsError(true);\n        throw new Error('Unable load post comments');\n      }\n    }\n  }, [selectedPost]);\n\n  // remove comment from server\n  const removeComment = useCallback(async (commentId: number) => {\n    setIsError(false);\n\n    if (selectedPost) {\n      try {\n        setComments(current => (\n          current?.filter(comment => comment.id !== commentId) || null));\n\n        await deleteComment(commentId);\n      } catch (error) {\n        setIsError(true);\n        throw new Error('Unable load post comments');\n      }\n    }\n  }, [selectedPost]);\n\n  useEffect(() => {\n    setComments(null);\n\n    if (selectedPost !== null) {\n      loadComments();\n    }\n  }, [selectedPost]);\n\n  const contextValue = {\n    comments,\n    isError,\n    isLoading,\n    addComment,\n    removeComment,\n  };\n\n  return (\n    <CommentsContext.Provider value={contextValue}>\n      {children}\n    </CommentsContext.Provider>\n  );\n};\n","import React from 'react';\n\nexport const ErrorTriangle: React.FC = () => {\n  return (\n    <span\n      className=\"icon is-small is-right has-text-danger\"\n      data-cy=\"ErrorIcon\"\n    >\n      <i className=\"fas fa-exclamation-triangle\" />\n    </span>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const ErrorMessage: React.FC<Props> = ({ children }) => {\n  return (\n    <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n      {children}\n    </p>\n  );\n};\n","import { FC, useMemo, memo } from 'react';\nimport classNames from 'classnames';\nimport { ErrorTriangle } from '../ErrorTriangle';\nimport { ErrorMessage } from '../ErrorMessage';\n\ntype Props = {\n  email: string,\n  isValidEmail: boolean,\n  isEmail: boolean,\n  handleEmailInput: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nexport const EmailInput: FC<Props> = memo(({\n  email, isEmail, isValidEmail, handleEmailInput,\n}) => {\n  const isValid = useMemo(\n    () => !isValidEmail || !isEmail, [isEmail, isValidEmail],\n  );\n\n  return (\n    <div className=\"field\" data-cy=\"EmailField\">\n      <label className=\"label\" htmlFor=\"comment-author-email\">\n        Author Email\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          id=\"comment-author-email\"\n          placeholder=\"email@test.com\"\n          className={classNames(\n            'input',\n            { 'is-danger': isValid },\n          )}\n          value={email}\n          onChange={handleEmailInput}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-envelope\" />\n        </span>\n\n        {isValid && <ErrorTriangle />}\n      </div>\n\n      {!isEmail && (\n        <ErrorMessage>\n          Email is required\n        </ErrorMessage>\n      )}\n\n      {!isValidEmail && (\n        <ErrorMessage>\n          Required format: example@gmail.com\n        </ErrorMessage>\n      )}\n    </div>\n  );\n});\n","import { FC, memo } from 'react';\nimport classNames from 'classnames';\nimport { ErrorMessage } from '../ErrorMessage';\nimport { ErrorTriangle } from '../ErrorTriangle';\n\ntype Props = {\n  name: string,\n  isValidName: boolean,\n  handleNameInput: (event: React.ChangeEvent<HTMLInputElement>) => void,\n};\n\nexport const NameInput: FC<Props> = memo(({\n  name, isValidName, handleNameInput,\n}) => {\n  return (\n    <div className=\"field\" data-cy=\"NameField\">\n      <label className=\"label\" htmlFor=\"comment-author-name\">\n        Author Name\n      </label>\n\n      <div className=\"control has-icons-left has-icons-right\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"comment-author-name\"\n          placeholder=\"Name Surname\"\n          className={classNames(\n            'input',\n            { 'is-danger': !isValidName },\n          )}\n          value={name}\n          onChange={handleNameInput}\n        />\n\n        <span className=\"icon is-small is-left\">\n          <i className=\"fas fa-user\" />\n        </span>\n\n        {!isValidName && <ErrorTriangle />}\n      </div>\n\n      {!isValidName && (\n        <ErrorMessage>\n          Name is required\n        </ErrorMessage>\n      )}\n    </div>\n  );\n});\n","export const emailPattern = /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/;\n","import { FC, memo } from 'react';\nimport classNames from 'classnames';\nimport { ErrorMessage } from '../ErrorMessage';\n\ntype Props = {\n  body: string,\n  isValidBody: boolean,\n  handleBodyChange: (event: React.ChangeEvent<HTMLTextAreaElement>) => void,\n};\n\nexport const TextArea: FC<Props> = memo(({\n  body, isValidBody, handleBodyChange,\n}) => {\n  return (\n    <div className=\"field\" data-cy=\"BodyField\">\n      <label className=\"label\" htmlFor=\"comment-body\">\n        Comment Text\n      </label>\n\n      <div className=\"control\">\n        <textarea\n          id=\"comment-body\"\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className={classNames(\n            'textarea',\n            { 'is-danger': !isValidBody },\n          )}\n          value={body}\n          onChange={handleBodyChange}\n        />\n      </div>\n\n      {!isValidBody && (\n        <ErrorMessage>\n          Enter some text\n        </ErrorMessage>\n      )}\n    </div>\n  );\n});\n","import { FC, memo } from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  shouldClear: string,\n  handleReset: () => void,\n  isLoading: boolean,\n};\n\nexport const FormButtons: FC<Props> = memo(({\n  shouldClear, handleReset, isLoading,\n}) => {\n  return (\n    <div className=\"field is-grouped\">\n      <div className=\"control\">\n        <button\n          type=\"submit\"\n          className={classNames(\n            'button is-link',\n            { 'is-loading': isLoading },\n          )}\n        >\n          Add\n        </button>\n      </div>\n\n      <div className=\"control\">\n        {shouldClear && (\n          <button\n            aria-label=\"reset\"\n            type=\"button\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        )}\n      </div>\n    </div>\n  );\n});\n","import React, {\n  FC, useState, useMemo, useCallback, useContext,\n} from 'react';\nimport { EmailInput } from './EmailInput';\nimport { NameInput } from './NameInput';\nimport { emailPattern } from './NewCommentsForm.Constant';\nimport { TextArea } from './TextArea';\nimport { FormButtons } from './FormButtons';\nimport { CommentsContext } from '../CommentsProvider';\nimport { PostsContext } from '../PostsProvider';\nimport { Comment } from '../../types/Comment';\n\nexport const NewCommentForm: FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [name, setName] = useState('');\n  const [isValidName, setIsValidName] = useState(true);\n  const [email, setEmail] = useState('');\n  const [isEmail, setIsEmail] = useState(true);\n  const [isValidEmail, setIsValidEmail] = useState(true);\n  const [body, setBody] = useState('');\n  const [isValidBody, setIsValidBody] = useState(true);\n  const { addComment } = useContext(CommentsContext);\n  const { selectedPost } = useContext(PostsContext);\n  const shouldClear = useMemo(() => name || email || body, [name, email, body]);\n\n  // handler for Name input field\n  const handleNameInput = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setName(event.target.value);\n      setIsValidName(true);\n    }, [],\n  );\n\n  // handler for Email input field\n  const handleEmailInput = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setEmail(event.target.value);\n      setIsEmail(true);\n      setIsValidEmail(true);\n    }, [],\n  );\n\n  // handler for Text area field\n  const handleBodyChange = useCallback(\n    (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n      setBody(event.target.value);\n      setIsValidBody(true);\n    }, [],\n  );\n\n  // hanler of Clear button - clear of fields, remove errors\n  const handleReset = useCallback(() => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setIsValidBody(true);\n    setIsValidEmail(true);\n    setIsEmail(true);\n    setIsValidName(true);\n  }, []);\n\n  // handler for submit action\n  const handleSubmit = useCallback(\n    async (event: React.FormEvent<HTMLFormElement>) => {\n      let canSubmit = true;\n\n      event.preventDefault();\n      setIsLoading(() => true);\n\n      if (!name.trim()) {\n        setIsValidName(false);\n        canSubmit = false;\n      }\n\n      if (!email.trim()) {\n        setIsEmail(false);\n        canSubmit = false;\n      }\n\n      if (!emailPattern.test(email)) {\n        setIsValidEmail(false);\n        canSubmit = false;\n      }\n\n      if (!body.trim()) {\n        setIsValidBody(false);\n        canSubmit = false;\n      }\n\n      if (canSubmit && selectedPost) {\n        const tempComment: Comment = {\n          id: 0,\n          postId: selectedPost.id,\n          name,\n          email,\n          body,\n        };\n\n        await addComment(tempComment);\n        setBody('');\n      }\n\n      setIsLoading(() => false);\n    }, [name, email, body],\n  );\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <NameInput\n        name={name}\n        isValidName={isValidName}\n        handleNameInput={handleNameInput}\n      />\n\n      <EmailInput\n        isEmail={isEmail}\n        email={email}\n        isValidEmail={isValidEmail}\n        handleEmailInput={handleEmailInput}\n      />\n\n      <TextArea\n        body={body}\n        isValidBody={isValidBody}\n        handleBodyChange={handleBodyChange}\n      />\n\n      <FormButtons\n        shouldClear={shouldClear}\n        handleReset={handleReset}\n        isLoading={isLoading}\n      />\n    </form>\n  );\n};\n","import { FC, useContext, memo } from 'react';\nimport { CommentsContext } from '../../../CommentsProvider';\n\nexport const PostComments: FC = memo(() => {\n  const { comments, removeComment } = useContext(CommentsContext);\n\n  return (\n    <>\n      {comments && <p className=\"title is-4\">Comments:</p>}\n\n      {comments && comments.map(comment => {\n        const {\n          id, email, body, name,\n        } = comment;\n\n        return (\n          <article\n            className=\"message is-small\"\n            data-cy=\"Comment\"\n            key={id}\n          >\n            <div className=\"message-header\">\n              <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                {name}\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n                onClick={() => removeComment(id)}\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {body}\n            </div>\n          </article>\n        );\n      })}\n    </>\n  );\n});\n","import { FC, useContext, memo } from 'react';\nimport { PostsContext } from '../../../PostsProvider';\n\nexport const PostHeader: FC = memo(() => {\n  const { selectedPost } = useContext(PostsContext);\n\n  return (\n    <div className=\"block\">\n      <h2 data-cy=\"PostTitle\">\n        {selectedPost\n          ? `#${selectedPost.id}: ${selectedPost.title}`\n          : ''}\n      </h2>\n\n      <p data-cy=\"PostBody\">\n        {selectedPost?.body}\n      </p>\n    </div>\n  );\n});\n","import {\n  FC, useContext, useMemo, useState, useEffect, useCallback,\n} from 'react';\nimport { CommentsContext } from '../../CommentsProvider';\nimport { Loader } from '../../Loader';\nimport { NewCommentForm } from '../../NewCommentForm/NewCommentForm';\nimport { PostsError } from '../../MainContent/PostsError';\nimport { PostComments } from './PostComments';\nimport { PostHeader } from './PostHeader';\n\nexport const PostDetails: FC = () => {\n  const { comments, isLoading, isError } = useContext(CommentsContext);\n  const [hasButton, setHasButton] = useState(true);\n  const isNoComments = useMemo(\n    () => comments?.length === 0 && !isLoading, [comments, isLoading],\n  );\n  const isComments = useMemo(\n    () => comments?.length !== 0 && !isLoading, [comments, isLoading],\n  );\n  const isButton = useMemo(\n    () => hasButton && !isLoading, [hasButton, isLoading],\n  );\n  const isForm = useMemo(\n    () => !hasButton && !isLoading, [hasButton, isLoading],\n  );\n\n  // handle click on 'write a comment' button to make form active\n  const handleFormShow = useCallback(() => (\n    setHasButton(false)\n  ), []);\n\n  useEffect(() => {\n    setHasButton(true);\n  }, []);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <PostHeader />\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {isError && (\n            <PostsError\n              className=\"notification is-danger\"\n              data-cy=\"CommentsError\"\n            >\n              Something went wrong!\n            </PostsError>\n          )}\n\n          {isNoComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isComments && <PostComments />}\n\n          {isButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleFormShow}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isForm && <NewCommentForm />}\n      </div>\n    </div>\n  );\n};\n","import { FC, useContext, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { PostDetails } from './PostDetails';\nimport { PostsContext } from '../PostsProvider';\n\nexport const Sidebar: FC = () => {\n  const { selectedPost, isLoading } = useContext(PostsContext);\n  const shoudBeShown = useMemo(\n    () => selectedPost !== null && !isLoading, [selectedPost, isLoading],\n  );\n\n  return (\n    <div\n      data-cy=\"Sidebar\"\n      className={classNames(\n        'tile',\n        'is-parent',\n        'is-8-desktop',\n        'Sidebar',\n        { 'Sidebar--open': shoudBeShown },\n      )}\n    >\n      <div className=\"tile is-child box is-success \">\n        {shoudBeShown && <PostDetails />}\n      </div>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { MainContent } from './components/MainContent';\nimport { Sidebar } from './components/Sidebar';\nimport { CommentsProvider } from './components/CommentsProvider';\nimport { PostsProvider } from './components/PostsProvider';\n\nexport const App: FC = () => {\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <PostsProvider>\n          <div className=\"tile is-ancestor\">\n            <div className=\"tile is-parent\">\n              <div className=\"tile is-child box is-success\">\n                <div className=\"block\">\n                  <UserSelector />\n                </div>\n\n                <MainContent />\n              </div>\n            </div>\n\n            <CommentsProvider>\n              <Sidebar />\n            </CommentsProvider>\n          </div>\n        </PostsProvider>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UsersProvider } from './components/UsersProvider';\n\nReactDOM.render(\n  <UsersProvider>\n    <App />\n  </UsersProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}